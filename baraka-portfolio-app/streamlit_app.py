# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t2I_r0FcmQ0B8HTqMBiJVpTE4wfmSH4U
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from baraka_utils import (
    SECTOR_GROUPS, get_data, get_fundamentals, score_factors,
    compute_portfolio_performance, compute_drawdown, michaud_resampling
)

st.set_page_config(page_title="Baraka Portfolio Optimizer", layout="wide")
st.title("💼 Baraka Portfolio Optimizer")

with st.sidebar:
    st.header("📊 Paramètres d'analyse")
    sector = st.selectbox("Choisis un secteur :", list(SECTOR_GROUPS.keys()))
    tickers = SECTOR_GROUPS[sector]
    start = st.date_input("Date de début", value=datetime(2022, 1, 1))
    end = st.date_input("Date de fin", value=datetime(2024, 1, 1))

if st.button("Lancer l'analyse"):
    returns, price_data = get_data(tickers, start=start.strftime('%Y-%m-%d'), end=end.strftime('%Y-%m-%d'))

    if returns.empty:
        st.error("⚠️ Données introuvables ou vides pour les tickers sélectionnés.")
    else:
        expected_returns = returns.mean() * 252
        cov_matrix = returns.cov() * 252
        weights = michaud_resampling(expected_returns.values, cov_matrix.values)

        weights_df = pd.DataFrame({"Ticker": tickers, "Poids": weights})
        st.subheader("📊 Poids optimisés (Michaud Resampling)")
        st.dataframe(weights_df.set_index("Ticker"))

        portfolio_return, volatility, sharpe = compute_portfolio_performance(weights, returns)
        cumulative_returns = (returns @ weights).add(1).cumprod()
        drawdown = compute_drawdown(cumulative_returns)

        st.metric("Rendement annuel", f"{portfolio_return:.2%}")
        st.metric("Volatilité", f"{volatility:.2%}")
        st.metric("Sharpe Ratio", f"{sharpe:.2f}")
        st.metric("Max Drawdown", f"{drawdown:.2%}")

        st.subheader("📈 Évolution des rendements cumulés")
        st.line_chart(cumulative_returns)

        st.subheader("📘 Données fondamentales + Scoring")
        fundamentals = get_fundamentals(tickers)
        scores = score_factors(fundamentals, price_data)
        st.dataframe(scores[['Ticker', 'P/E Ratio', 'ROE', 'Value', 'Quality', 'Momentum']].set_index('Ticker'))